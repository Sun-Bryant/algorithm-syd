package LeetCode;

/**
 * 134. 加油站
 * 在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
 * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
 * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。
 *
 * 说明: 
 * 如果题目有解，该答案即为唯一答案。
 * 输入数组均为非空数组，且长度相同。
 * 输入数组中的元素均为非负数。
 *
 * 示例 1:
 * 输入:
 * gas  = [1,2,3,4,5]
 * cost = [3,4,5,1,2]
 * 输出: 3
 * 解释:
 * 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
 * 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
 * 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
 * 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
 * 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
 * 因此，3 可为起始索引。
 *
 * 示例 2:
 * 输入:
 * gas  = [2,3,4]
 * cost = [3,4,3]
 * 输出: -1
 * 解释:
 * 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
 * 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
 * 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
 * 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
 * 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
 * 因此，无论怎样，你都不可能绕环路行驶一周。
 */
public class LeetCode_134 {

    /**
     * 贪心算法   -- 两趟扫描
     * 时间O(N)，不用数组保存每个加油站的汽油余量则为O(1)，使用则O(N)。
     */
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int value = 0;
        // 1、计算出每个加油站剩余的油量，并计算总剩余量
        // 2、如果总剩余量<0，说明汽油不足以绕一圈，无解，否则一定有解。
        for(int i = 0; i < gas.length; i++) {
            value += (gas[i] - cost[i]);
        }
        if (value < 0) return -1;

        // 3、从start位置开始出发，记录从出发位置积累的剩余汽油油量，如果在为i处，油箱为负数，说明从位置0不足以到位置i。哪下一个出发位置应当在哪？
        // 4、解会不会在start之前？不会，因为是从前边遍历过来的，如果start前边的位置start'能到本加油站，start会是start'，而不是当前值。
        // 5、解会不会是start到i位置中的某个加油站？
        // 假如存在这样一个加油站start'，start能到start'，然后到了i，而start还没有切换，说明start到start'时，sum>=0的，有足够的汽油到start'，
        // 如果从start'出发到i，sum只会比当前的汽油更少，可能都不足以到达i。
        // 根据排除法，所以解只能在i或者i右边，那就从i开始找。
        // base case：start=0，即从0号位置出发。
        // 当遍历数组结束时，start必然是解。
        int start = 0;
        int sum = 0;
        // 从头开始寻找解，
        for (int i = 0; i < gas.length; i++) {
            // 如果累计油量小于0说明必不是解。
            if (sum < 0) {
                start = i; // 解只能在i或者i右边，那就从i开始找。
                sum = 0;
            }
            sum += (gas[i] - cost[i]);
        }
        return start;
    }
}
